{
  "version": 4,
  "terraform_version": "0.12.10",
  "serial": 32,
  "lineage": "f2fe8b6a-6a17-56d9-4869-c22384f23f10",
  "outputs": {
    "scala_code": {
      "value": {
        "dag_edge": [
          {
            "source": "dynamo_catalog",
            "target": "mapping",
            "target_parameter": ""
          },
          {
            "source": "mapping",
            "target": "selectfields",
            "target_parameter": ""
          },
          {
            "source": "selectfields",
            "target": "resolvechoice",
            "target_parameter": ""
          },
          {
            "source": "resolvechoice",
            "target": "datasink",
            "target_parameter": ""
          }
        ],
        "dag_node": [
          {
            "args": [
              {
                "name": "database",
                "param": false,
                "value": "\"extractorcatalogdb\""
              },
              {
                "name": "table_name",
                "param": false,
                "value": "\"extractorcatalogtable\""
              }
            ],
            "id": "dynamo_catalog",
            "line_number": 0,
            "node_type": "DataSource"
          },
          {
            "args": [
              {
                "name": "mappings",
                "param": false,
                "value": "[(\"column1\", \"string\", \"column1\", \"string\")]"
              }
            ],
            "id": "mapping",
            "line_number": 0,
            "node_type": "ApplyMapping"
          },
          {
            "args": [
              {
                "name": "paths",
                "param": false,
                "value": "[\"column1\"]"
              }
            ],
            "id": "selectfields",
            "line_number": 0,
            "node_type": "SelectFields"
          },
          {
            "args": [
              {
                "name": "choice",
                "param": false,
                "value": "\"MATCH_CATALOG\""
              },
              {
                "name": "database",
                "param": false,
                "value": "\"extractorcatalogdb\""
              },
              {
                "name": "table_name",
                "param": false,
                "value": "\"extractorcatalogtable\""
              }
            ],
            "id": "resolvechoice",
            "line_number": 0,
            "node_type": "ResolveChoice"
          },
          {
            "args": [
              {
                "name": "database",
                "param": false,
                "value": "\"extractorcatalogdb\""
              },
              {
                "name": "table_name",
                "param": false,
                "value": "\"extractorcatalogtable\""
              }
            ],
            "id": "datasink",
            "line_number": 0,
            "node_type": "DataSink"
          }
        ],
        "id": "2019-10-17 03:47:59.178507156 +0000 UTC",
        "language": "SCALA",
        "python_script": "",
        "scala_code": "import com.amazonaws.services.glue.ChoiceOption\nimport com.amazonaws.services.glue.GlueContext\nimport com.amazonaws.services.glue.MappingSpec\nimport com.amazonaws.services.glue.ResolveSpec\nimport com.amazonaws.services.glue.errors.CallSite\nimport com.amazonaws.services.glue.util.GlueArgParser\nimport com.amazonaws.services.glue.util.Job\nimport com.amazonaws.services.glue.util.JsonOptions\nimport org.apache.spark.SparkContext\nimport scala.collection.JavaConverters._\n\nobject GlueApp {\n  def main(sysArgs: Array[String]) {\n    val spark: SparkContext = new SparkContext()\n    val glueContext: GlueContext = new GlueContext(spark)\n    // @params: [JOB_NAME]\n    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq(\"JOB_NAME\").toArray)\n    Job.init(args(\"JOB_NAME\"), glueContext, args.asJava)\n    // @type: DataSource\n    // @args: [database = \"extractorcatalogdb\", table_name = \"extractorcatalogtable\", transformation_ctx = \"dynamo_catalog\"]\n    // @return: dynamo_catalog\n    // @inputs: []\n    val dynamo_catalog = glueContext.getCatalogSource(database = \"extractorcatalogdb\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"dynamo_catalog\").getDynamicFrame()\n    // @type: ApplyMapping\n    // @args: [mappings = [(\"column1\", \"string\", \"column1\", \"string\")], transformation_ctx = \"mapping\"]\n    // @return: mapping\n    // @inputs: [frame = dynamo_catalog]\n    val mapping = dynamo_catalog.applyMapping(mappings = Seq((\"column1\", \"string\", \"column1\", \"string\")), caseSensitive = false, transformationContext = \"mapping\")\n    // @type: SelectFields\n    // @args: [paths = [\"column1\"], transformation_ctx = \"selectfields\"]\n    // @return: selectfields\n    // @inputs: [frame = mapping]\n    val selectfields = mapping.selectFields(paths = Seq(\"column1\"), transformationContext = \"selectfields\")\n    // @type: ResolveChoice\n    // @args: [database = \"extractorcatalogdb\", choice = \"MATCH_CATALOG\", table_name = \"extractorcatalogtable\", transformation_ctx = \"resolvechoice\"]\n    // @return: resolvechoice\n    // @inputs: [frame = selectfields]\n    val resolvechoice = selectfields.resolveChoice(choiceOption = Some(ChoiceOption(\"MATCH_CATALOG\")), database = Some(\"extractorcatalogdb\"), tableName = Some(\"extractorcatalogtable\"), transformationContext = \"resolvechoice\")\n    // @type: DataSink\n    // @args: [database = \"extractorcatalogdb\", table_name = \"extractorcatalogtable\", transformation_ctx = \"datasink\"]\n    // @return: datasink\n    // @inputs: [frame = resolvechoice]\n    val datasink = glueContext.getCatalogSink(database = \"extractorcatalogdb\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"datasink\").writeDynamicFrame(resolvechoice)\n    Job.commit()\n  }\n}"
      },
      "type": [
        "object",
        {
          "dag_edge": [
            "list",
            [
              "object",
              {
                "source": "string",
                "target": "string",
                "target_parameter": "string"
              }
            ]
          ],
          "dag_node": [
            "list",
            [
              "object",
              {
                "args": [
                  "list",
                  [
                    "object",
                    {
                      "name": "string",
                      "param": "bool",
                      "value": "string"
                    }
                  ]
                ],
                "id": "string",
                "line_number": "number",
                "node_type": "string"
              }
            ]
          ],
          "id": "string",
          "language": "string",
          "python_script": "string",
          "scala_code": "string"
        }
      ]
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_glue_script",
      "name": "scala_script",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dag_edge": [
              {
                "source": "dynamo_catalog",
                "target": "mapping",
                "target_parameter": ""
              },
              {
                "source": "mapping",
                "target": "selectfields",
                "target_parameter": ""
              },
              {
                "source": "selectfields",
                "target": "resolvechoice",
                "target_parameter": ""
              },
              {
                "source": "resolvechoice",
                "target": "datasink",
                "target_parameter": ""
              }
            ],
            "dag_node": [
              {
                "args": [
                  {
                    "name": "database",
                    "param": false,
                    "value": "\"extractorcatalogdb\""
                  },
                  {
                    "name": "table_name",
                    "param": false,
                    "value": "\"extractorcatalogtable\""
                  }
                ],
                "id": "dynamo_catalog",
                "line_number": 0,
                "node_type": "DataSource"
              },
              {
                "args": [
                  {
                    "name": "mappings",
                    "param": false,
                    "value": "[(\"column1\", \"string\", \"column1\", \"string\")]"
                  }
                ],
                "id": "mapping",
                "line_number": 0,
                "node_type": "ApplyMapping"
              },
              {
                "args": [
                  {
                    "name": "paths",
                    "param": false,
                    "value": "[\"column1\"]"
                  }
                ],
                "id": "selectfields",
                "line_number": 0,
                "node_type": "SelectFields"
              },
              {
                "args": [
                  {
                    "name": "choice",
                    "param": false,
                    "value": "\"MATCH_CATALOG\""
                  },
                  {
                    "name": "database",
                    "param": false,
                    "value": "\"extractorcatalogdb\""
                  },
                  {
                    "name": "table_name",
                    "param": false,
                    "value": "\"extractorcatalogtable\""
                  }
                ],
                "id": "resolvechoice",
                "line_number": 0,
                "node_type": "ResolveChoice"
              },
              {
                "args": [
                  {
                    "name": "database",
                    "param": false,
                    "value": "\"extractorcatalogdb\""
                  },
                  {
                    "name": "table_name",
                    "param": false,
                    "value": "\"extractorcatalogtable\""
                  }
                ],
                "id": "datasink",
                "line_number": 0,
                "node_type": "DataSink"
              }
            ],
            "id": "2019-10-17 03:47:59.178507156 +0000 UTC",
            "language": "SCALA",
            "python_script": "",
            "scala_code": "import com.amazonaws.services.glue.ChoiceOption\nimport com.amazonaws.services.glue.GlueContext\nimport com.amazonaws.services.glue.MappingSpec\nimport com.amazonaws.services.glue.ResolveSpec\nimport com.amazonaws.services.glue.errors.CallSite\nimport com.amazonaws.services.glue.util.GlueArgParser\nimport com.amazonaws.services.glue.util.Job\nimport com.amazonaws.services.glue.util.JsonOptions\nimport org.apache.spark.SparkContext\nimport scala.collection.JavaConverters._\n\nobject GlueApp {\n  def main(sysArgs: Array[String]) {\n    val spark: SparkContext = new SparkContext()\n    val glueContext: GlueContext = new GlueContext(spark)\n    // @params: [JOB_NAME]\n    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq(\"JOB_NAME\").toArray)\n    Job.init(args(\"JOB_NAME\"), glueContext, args.asJava)\n    // @type: DataSource\n    // @args: [database = \"extractorcatalogdb\", table_name = \"extractorcatalogtable\", transformation_ctx = \"dynamo_catalog\"]\n    // @return: dynamo_catalog\n    // @inputs: []\n    val dynamo_catalog = glueContext.getCatalogSource(database = \"extractorcatalogdb\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"dynamo_catalog\").getDynamicFrame()\n    // @type: ApplyMapping\n    // @args: [mappings = [(\"column1\", \"string\", \"column1\", \"string\")], transformation_ctx = \"mapping\"]\n    // @return: mapping\n    // @inputs: [frame = dynamo_catalog]\n    val mapping = dynamo_catalog.applyMapping(mappings = Seq((\"column1\", \"string\", \"column1\", \"string\")), caseSensitive = false, transformationContext = \"mapping\")\n    // @type: SelectFields\n    // @args: [paths = [\"column1\"], transformation_ctx = \"selectfields\"]\n    // @return: selectfields\n    // @inputs: [frame = mapping]\n    val selectfields = mapping.selectFields(paths = Seq(\"column1\"), transformationContext = \"selectfields\")\n    // @type: ResolveChoice\n    // @args: [database = \"extractorcatalogdb\", choice = \"MATCH_CATALOG\", table_name = \"extractorcatalogtable\", transformation_ctx = \"resolvechoice\"]\n    // @return: resolvechoice\n    // @inputs: [frame = selectfields]\n    val resolvechoice = selectfields.resolveChoice(choiceOption = Some(ChoiceOption(\"MATCH_CATALOG\")), database = Some(\"extractorcatalogdb\"), tableName = Some(\"extractorcatalogtable\"), transformationContext = \"resolvechoice\")\n    // @type: DataSink\n    // @args: [database = \"extractorcatalogdb\", table_name = \"extractorcatalogtable\", transformation_ctx = \"datasink\"]\n    // @return: datasink\n    // @inputs: [frame = resolvechoice]\n    val datasink = glueContext.getCatalogSink(database = \"extractorcatalogdb\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"datasink\").writeDynamicFrame(resolvechoice)\n    Job.commit()\n  }\n}"
          },
          "depends_on": [
            "aws_glue_catalog_database.aws_glue_catalog_database",
            "aws_glue_catalog_table.aws_glue_catalog_table"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_catalog_database",
      "name": "aws_glue_catalog_database",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "catalog_id": "061753407487",
            "description": "",
            "id": "061753407487:ExtractorCatalogDB",
            "location_uri": "",
            "name": "extractorcatalogdb",
            "parameters": {}
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_catalog_table",
      "name": "aws_glue_catalog_table",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "catalog_id": "061753407487",
            "database_name": "extractorcatalogdb",
            "description": "",
            "id": "061753407487:extractorcatalogdb:ExtractorCatalogTable",
            "name": "extractorcatalogtable",
            "owner": "",
            "parameters": null,
            "partition_keys": [],
            "retention": 0,
            "storage_descriptor": [],
            "table_type": "",
            "view_expanded_text": "",
            "view_original_text": ""
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_crawler",
      "name": "dynamo_crawler",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:glue:us-east-1:061753407487:crawler/crawler",
            "catalog_target": [],
            "classifiers": [],
            "configuration": "",
            "database_name": "extractorcatalogdb",
            "description": "",
            "dynamodb_target": [
              {
                "path": "testTable"
              }
            ],
            "id": "crawler",
            "jdbc_target": [],
            "name": "crawler",
            "role": "Glue",
            "s3_target": [],
            "schedule": "",
            "schema_change_policy": [
              {
                "delete_behavior": "DEPRECATE_IN_DATABASE",
                "update_behavior": "UPDATE_IN_DATABASE"
              }
            ],
            "security_configuration": "",
            "table_prefix": ""
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_glue_catalog_database.aws_glue_catalog_database"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "scala_dag",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "public-read-write",
            "arn": "arn:aws:s3:::shanesscaladag",
            "bucket": "shanesscaladag",
            "bucket_domain_name": "shanesscaladag.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "shanesscaladag.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "shanesscaladag",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [],
            "tags": null,
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_object",
      "name": "file_upload",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": "private",
            "bucket": "shanesscaladag",
            "cache_control": "",
            "content": null,
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "binary/octet-stream",
            "etag": "41ff421cfa6b33ad360ae79a501d4d17",
            "force_destroy": false,
            "id": "transform.scala",
            "key": "transform.scala",
            "kms_key_id": null,
            "metadata": null,
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "server_side_encryption": "",
            "source": "./scalaCode.scala",
            "storage_class": "STANDARD",
            "tags": null,
            "version_id": "",
            "website_redirect": ""
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_s3_bucket.scala_dag",
            "local_file.scala_code"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "scala_code",
      "provider": "provider.local",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "import com.amazonaws.services.glue.ChoiceOption\nimport com.amazonaws.services.glue.GlueContext\nimport com.amazonaws.services.glue.MappingSpec\nimport com.amazonaws.services.glue.ResolveSpec\nimport com.amazonaws.services.glue.errors.CallSite\nimport com.amazonaws.services.glue.util.GlueArgParser\nimport com.amazonaws.services.glue.util.Job\nimport com.amazonaws.services.glue.util.JsonOptions\nimport org.apache.spark.SparkContext\nimport scala.collection.JavaConverters._\n\nobject GlueApp {\n  def main(sysArgs: Array[String]) {\n    val spark: SparkContext = new SparkContext()\n    val glueContext: GlueContext = new GlueContext(spark)\n    // @params: [JOB_NAME]\n    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq(\"JOB_NAME\").toArray)\n    Job.init(args(\"JOB_NAME\"), glueContext, args.asJava)\n    // @type: DataSource\n    // @args: [database = \"extractorcatalogdb\", table_name = \"extractorcatalogtable\", transformation_ctx = \"dynamo_catalog\"]\n    // @return: dynamo_catalog\n    // @inputs: []\n    val dynamo_catalog = glueContext.getCatalogSource(database = \"extractorcatalogdb\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"dynamo_catalog\").getDynamicFrame()\n    // @type: ApplyMapping\n    // @args: [mappings = [(\"column1\", \"string\", \"column1\", \"string\")], transformation_ctx = \"mapping\"]\n    // @return: mapping\n    // @inputs: [frame = dynamo_catalog]\n    val mapping = dynamo_catalog.applyMapping(mappings = Seq((\"column1\", \"string\", \"column1\", \"string\")), caseSensitive = false, transformationContext = \"mapping\")\n    // @type: SelectFields\n    // @args: [paths = [\"column1\"], transformation_ctx = \"selectfields\"]\n    // @return: selectfields\n    // @inputs: [frame = mapping]\n    val selectfields = mapping.selectFields(paths = Seq(\"column1\"), transformationContext = \"selectfields\")\n    // @type: ResolveChoice\n    // @args: [database = \"extractorcatalogdb\", choice = \"MATCH_CATALOG\", table_name = \"extractorcatalogtable\", transformation_ctx = \"resolvechoice\"]\n    // @return: resolvechoice\n    // @inputs: [frame = selectfields]\n    val resolvechoice = selectfields.resolveChoice(choiceOption = Some(ChoiceOption(\"MATCH_CATALOG\")), database = Some(\"extractorcatalogdb\"), tableName = Some(\"extractorcatalogtable\"), transformationContext = \"resolvechoice\")\n    // @type: DataSink\n    // @args: [database = \"extractorcatalogdb\", table_name = \"extractorcatalogtable\", transformation_ctx = \"datasink\"]\n    // @return: datasink\n    // @inputs: [frame = resolvechoice]\n    val datasink = glueContext.getCatalogSink(database = \"extractorcatalogdb\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"datasink\").writeDynamicFrame(resolvechoice)\n    Job.commit()\n  }\n}",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./scalaCode.scala",
            "id": "778a4e3a6bba6839c6041cc9a4fdb13bf37e1d42",
            "sensitive_content": null
          },
          "private": "bnVsbA==",
          "depends_on": [
            "data.aws_glue_script.scala_script"
          ]
        }
      ]
    }
  ]
}
