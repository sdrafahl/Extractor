{
  "version": 4,
  "terraform_version": "0.12.10",
  "serial": 234,
  "lineage": "f2fe8b6a-6a17-56d9-4869-c22384f23f10",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "aws_glue_script",
      "name": "scala_script",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dag_edge": [
              {
                "source": "datasource0",
                "target": "applymapping1",
                "target_parameter": ""
              },
              {
                "source": "applymapping1",
                "target": "selectfields2",
                "target_parameter": ""
              },
              {
                "source": "selectfields2",
                "target": "resolvechoice3",
                "target_parameter": ""
              },
              {
                "source": "resolvechoice3",
                "target": "datasink4",
                "target_parameter": ""
              }
            ],
            "dag_node": [
              {
                "args": [
                  {
                    "name": "database",
                    "param": false,
                    "value": "\"extractorcatalogdb\""
                  },
                  {
                    "name": "table_name",
                    "param": false,
                    "value": "\"testtable\""
                  }
                ],
                "id": "datasource0",
                "line_number": 0,
                "node_type": "DataSource"
              },
              {
                "args": [
                  {
                    "name": "mappings",
                    "param": false,
                    "value": "[(\"column1\", \"string\", \"secondary\", \"string\"), (\"column2\", \"string\", \"column2\", \"string\")]"
                  }
                ],
                "id": "applymapping1",
                "line_number": 0,
                "node_type": "ApplyMapping"
              },
              {
                "args": [
                  {
                    "name": "paths",
                    "param": false,
                    "value": "[\"secondary\"]"
                  }
                ],
                "id": "selectfields2",
                "line_number": 0,
                "node_type": "SelectFields"
              },
              {
                "args": [
                  {
                    "name": "choice",
                    "param": false,
                    "value": "\"MATCH_CATALOG\""
                  },
                  {
                    "name": "database",
                    "param": false,
                    "value": "\"aws_glue_catalog_database_destination\""
                  },
                  {
                    "name": "table_name",
                    "param": false,
                    "value": "\"extractorcatalogtable\""
                  }
                ],
                "id": "resolvechoice3",
                "line_number": 0,
                "node_type": "ResolveChoice"
              },
              {
                "args": [
                  {
                    "name": "database",
                    "param": false,
                    "value": "\"aws_glue_catalog_database_destination\""
                  },
                  {
                    "name": "table_name",
                    "param": false,
                    "value": "\"extractorcatalogtable\""
                  }
                ],
                "id": "datasink4",
                "line_number": 0,
                "node_type": "DataSink"
              }
            ],
            "id": "2019-10-18 06:08:02.412268752 +0000 UTC",
            "language": "SCALA",
            "python_script": "",
            "scala_code": "import com.amazonaws.services.glue.ChoiceOption\nimport com.amazonaws.services.glue.GlueContext\nimport com.amazonaws.services.glue.MappingSpec\nimport com.amazonaws.services.glue.ResolveSpec\nimport com.amazonaws.services.glue.errors.CallSite\nimport com.amazonaws.services.glue.util.GlueArgParser\nimport com.amazonaws.services.glue.util.Job\nimport com.amazonaws.services.glue.util.JsonOptions\nimport org.apache.spark.SparkContext\nimport scala.collection.JavaConverters._\n\nobject GlueApp {\n  def main(sysArgs: Array[String]) {\n    val spark: SparkContext = new SparkContext()\n    val glueContext: GlueContext = new GlueContext(spark)\n    // @params: [JOB_NAME]\n    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq(\"JOB_NAME\").toArray)\n    Job.init(args(\"JOB_NAME\"), glueContext, args.asJava)\n    // @type: DataSource\n    // @args: [database = \"extractorcatalogdb\", table_name = \"testtable\", transformation_ctx = \"datasource0\"]\n    // @return: datasource0\n    // @inputs: []\n    val datasource0 = glueContext.getCatalogSource(database = \"extractorcatalogdb\", tableName = \"testtable\", redshiftTmpDir = \"\", transformationContext = \"datasource0\").getDynamicFrame()\n    // @type: ApplyMapping\n    // @args: [mappings = [(\"column1\", \"string\", \"secondary\", \"string\"), (\"column2\", \"string\", \"column2\", \"string\")], transformation_ctx = \"applymapping1\"]\n    // @return: applymapping1\n    // @inputs: [frame = datasource0]\n    val applymapping1 = datasource0.applyMapping(mappings = Seq((\"column1\", \"string\", \"secondary\", \"string\"), (\"column2\", \"string\", \"column2\", \"string\")), caseSensitive = false, transformationContext = \"applymapping1\")\n    // @type: SelectFields\n    // @args: [paths = [\"secondary\"], transformation_ctx = \"selectfields2\"]\n    // @return: selectfields2\n    // @inputs: [frame = applymapping1]\n    val selectfields2 = applymapping1.selectFields(paths = Seq(\"secondary\"), transformationContext = \"selectfields2\")\n    // @type: ResolveChoice\n    // @args: [database = \"aws_glue_catalog_database_destination\", choice = \"MATCH_CATALOG\", table_name = \"extractorcatalogtable\", transformation_ctx = \"resolvechoice3\"]\n    // @return: resolvechoice3\n    // @inputs: [frame = selectfields2]\n    val resolvechoice3 = selectfields2.resolveChoice(choiceOption = Some(ChoiceOption(\"MATCH_CATALOG\")), database = Some(\"aws_glue_catalog_database_destination\"), tableName = Some(\"extractorcatalogtable\"), transformationContext = \"resolvechoice3\")\n    // @type: DataSink\n    // @args: [database = \"aws_glue_catalog_database_destination\", table_name = \"extractorcatalogtable\", transformation_ctx = \"datasink4\"]\n    // @return: datasink4\n    // @inputs: [frame = resolvechoice3]\n    val datasink4 = glueContext.getCatalogSink(database = \"aws_glue_catalog_database_destination\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"datasink4\").writeDynamicFrame(resolvechoice3)\n    Job.commit()\n  }\n}"
          },
          "depends_on": [
            "aws_glue_catalog_database.aws_glue_catalog_database",
            "aws_glue_catalog_database.aws_glue_catalog_database_destination",
            "aws_glue_catalog_table.aws_glue_catalog_table_destination"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_catalog_database",
      "name": "aws_glue_catalog_database",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "catalog_id": "061753407487",
            "description": "",
            "id": "061753407487:ExtractorCatalogDB",
            "location_uri": "",
            "name": "extractorcatalogdb",
            "parameters": {}
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_catalog_database",
      "name": "aws_glue_catalog_database_destination",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "catalog_id": "061753407487",
            "description": "",
            "id": "061753407487:aws_glue_catalog_database_destination",
            "location_uri": "",
            "name": "aws_glue_catalog_database_destination",
            "parameters": {}
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_catalog_table",
      "name": "aws_glue_catalog_table_destination",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "catalog_id": "061753407487",
            "database_name": "aws_glue_catalog_database_destination",
            "description": "stuff",
            "id": "061753407487:aws_glue_catalog_database_destination:ExtractorCatalogTable",
            "name": "extractorcatalogtable",
            "owner": "",
            "parameters": {
              "EXTERNAL": "TRUE",
              "parquet.compression": "SNAPPY"
            },
            "partition_keys": [],
            "retention": 0,
            "storage_descriptor": [
              {
                "bucket_columns": null,
                "columns": [
                  {
                    "comment": "",
                    "name": "secondary",
                    "type": "string"
                  },
                  {
                    "comment": "",
                    "name": "column2",
                    "type": "string"
                  }
                ],
                "compressed": false,
                "input_format": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
                "location": "s3://shanesscaladag/stuff",
                "number_of_buckets": 0,
                "output_format": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
                "parameters": null,
                "ser_de_info": [
                  {
                    "name": "my-stream",
                    "parameters": {
                      "serialization.format": "1"
                    },
                    "serialization_library": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe"
                  }
                ],
                "skewed_info": [],
                "sort_columns": [],
                "stored_as_sub_directories": false
              }
            ],
            "table_type": "EXTERNAL_TABLE",
            "view_expanded_text": "",
            "view_original_text": ""
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_glue_catalog_database.aws_glue_catalog_database_destination"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_crawler",
      "name": "dynamo_crawler",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:glue:us-east-1:061753407487:crawler/crawler",
            "catalog_target": [],
            "classifiers": [],
            "configuration": "",
            "database_name": "extractorcatalogdb",
            "description": "",
            "dynamodb_target": [
              {
                "path": "testtable"
              }
            ],
            "id": "crawler",
            "jdbc_target": [],
            "name": "crawler",
            "role": "Glue",
            "s3_target": [],
            "schedule": "cron(15 12 * * ? *)",
            "schema_change_policy": [
              {
                "delete_behavior": "DEPRECATE_IN_DATABASE",
                "update_behavior": "UPDATE_IN_DATABASE"
              }
            ],
            "security_configuration": "",
            "table_prefix": ""
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_glue_catalog_database.aws_glue_catalog_database"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_job",
      "name": "tranform_job",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocated_capacity": 10,
            "command": [
              {
                "name": "glueetl",
                "python_version": "2",
                "script_location": "s3://shanesscaladag/transform.scala"
              }
            ],
            "connections": [],
            "default_arguments": {
              "--job-language": "scala"
            },
            "description": "",
            "execution_property": [
              {
                "max_concurrent_runs": 1
              }
            ],
            "id": "transform_job",
            "max_capacity": 10,
            "max_retries": 0,
            "name": "transform_job",
            "role_arn": "arn:aws:iam::061753407487:role/Glue",
            "security_configuration": "",
            "timeout": 2880
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_s3_bucket.scala_dag",
            "aws_s3_bucket_object.file_upload"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_glue_trigger",
      "name": "trigger",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "actions": [
              {
                "arguments": {},
                "job_name": "transform_job",
                "timeout": 0
              }
            ],
            "description": "",
            "enabled": true,
            "id": "example",
            "name": "example",
            "predicate": [],
            "schedule": "cron(15 12 * * ? *)",
            "timeouts": null,
            "type": "SCHEDULED"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfX0=",
          "depends_on": [
            "aws_glue_job.tranform_job"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "scala_dag",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acceleration_status": "",
            "acl": "public-read-write",
            "arn": "arn:aws:s3:::shanesscaladag",
            "bucket": "shanesscaladag",
            "bucket_domain_name": "shanesscaladag.s3.amazonaws.com",
            "bucket_prefix": null,
            "bucket_regional_domain_name": "shanesscaladag.s3.amazonaws.com",
            "cors_rule": [],
            "force_destroy": false,
            "hosted_zone_id": "Z3AQBSTGFYJSTF",
            "id": "shanesscaladag",
            "lifecycle_rule": [],
            "logging": [],
            "object_lock_configuration": [],
            "policy": null,
            "region": "us-east-1",
            "replication_configuration": [],
            "request_payer": "BucketOwner",
            "server_side_encryption_configuration": [],
            "tags": {},
            "versioning": [
              {
                "enabled": false,
                "mfa_delete": false
              }
            ],
            "website": [],
            "website_domain": null,
            "website_endpoint": null
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket_object",
      "name": "file_upload",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "acl": "private",
            "bucket": "shanesscaladag",
            "cache_control": "",
            "content": null,
            "content_base64": null,
            "content_disposition": "",
            "content_encoding": "",
            "content_language": "",
            "content_type": "binary/octet-stream",
            "etag": "089e3aceaa199b8c65873189c52eaa96",
            "force_destroy": false,
            "id": "transform.scala",
            "key": "transform.scala",
            "kms_key_id": null,
            "metadata": null,
            "object_lock_legal_hold_status": "",
            "object_lock_mode": "",
            "object_lock_retain_until_date": "",
            "server_side_encryption": "",
            "source": "./scalaCode.scala",
            "storage_class": "STANDARD",
            "tags": null,
            "version_id": "",
            "website_redirect": ""
          },
          "private": "bnVsbA==",
          "depends_on": [
            "aws_s3_bucket.scala_dag",
            "local_file.scala_code"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "scala_code",
      "provider": "provider.local",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "import com.amazonaws.services.glue.ChoiceOption\nimport com.amazonaws.services.glue.GlueContext\nimport com.amazonaws.services.glue.MappingSpec\nimport com.amazonaws.services.glue.ResolveSpec\nimport com.amazonaws.services.glue.errors.CallSite\nimport com.amazonaws.services.glue.util.GlueArgParser\nimport com.amazonaws.services.glue.util.Job\nimport com.amazonaws.services.glue.util.JsonOptions\nimport org.apache.spark.SparkContext\nimport scala.collection.JavaConverters._\n\nobject GlueApp {\n  def main(sysArgs: Array[String]) {\n    val spark: SparkContext = new SparkContext()\n    val glueContext: GlueContext = new GlueContext(spark)\n    // @params: [JOB_NAME]\n    val args = GlueArgParser.getResolvedOptions(sysArgs, Seq(\"JOB_NAME\").toArray)\n    Job.init(args(\"JOB_NAME\"), glueContext, args.asJava)\n    // @type: DataSource\n    // @args: [database = \"extractorcatalogdb\", table_name = \"testtable\", transformation_ctx = \"datasource0\"]\n    // @return: datasource0\n    // @inputs: []\n    val datasource0 = glueContext.getCatalogSource(database = \"extractorcatalogdb\", tableName = \"testtable\", redshiftTmpDir = \"\", transformationContext = \"datasource0\").getDynamicFrame()\n    // @type: ApplyMapping\n    // @args: [mappings = [(\"column1\", \"string\", \"secondary\", \"string\"), (\"column2\", \"string\", \"column2\", \"string\")], transformation_ctx = \"applymapping1\"]\n    // @return: applymapping1\n    // @inputs: [frame = datasource0]\n    val applymapping1 = datasource0.applyMapping(mappings = Seq((\"column1\", \"string\", \"secondary\", \"string\"), (\"column2\", \"string\", \"column2\", \"string\")), caseSensitive = false, transformationContext = \"applymapping1\")\n    // @type: SelectFields\n    // @args: [paths = [\"secondary\"], transformation_ctx = \"selectfields2\"]\n    // @return: selectfields2\n    // @inputs: [frame = applymapping1]\n    val selectfields2 = applymapping1.selectFields(paths = Seq(\"secondary\"), transformationContext = \"selectfields2\")\n    // @type: ResolveChoice\n    // @args: [database = \"aws_glue_catalog_database_destination\", choice = \"MATCH_CATALOG\", table_name = \"extractorcatalogtable\", transformation_ctx = \"resolvechoice3\"]\n    // @return: resolvechoice3\n    // @inputs: [frame = selectfields2]\n    val resolvechoice3 = selectfields2.resolveChoice(choiceOption = Some(ChoiceOption(\"MATCH_CATALOG\")), database = Some(\"aws_glue_catalog_database_destination\"), tableName = Some(\"extractorcatalogtable\"), transformationContext = \"resolvechoice3\")\n    // @type: DataSink\n    // @args: [database = \"aws_glue_catalog_database_destination\", table_name = \"extractorcatalogtable\", transformation_ctx = \"datasink4\"]\n    // @return: datasink4\n    // @inputs: [frame = resolvechoice3]\n    val datasink4 = glueContext.getCatalogSink(database = \"aws_glue_catalog_database_destination\", tableName = \"extractorcatalogtable\", redshiftTmpDir = \"\", transformationContext = \"datasink4\").writeDynamicFrame(resolvechoice3)\n    Job.commit()\n  }\n}",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./scalaCode.scala",
            "id": "88d3b25243ea2bf0d2c322ce0a55babddd2cd5c2",
            "sensitive_content": null
          },
          "private": "bnVsbA==",
          "depends_on": [
            "data.aws_glue_script.scala_script"
          ]
        }
      ]
    }
  ]
}
